x-app-env: &app-env
    VITE_INERTIA_SSR_PORT: ${SSR_PORT}
    DB_CONNECTION: sqlite
    REDIS_HOST: redis
    SESSION_DRIVER: redis
    CACHE_STORE: redis
    QUEUE_CONNECTION: redis

services:
    app:
        build:
            context: .
            dockerfile: ./.docker/app.Dockerfile
            args:
                TOKEN: ${TOKEN}
        volumes:
            - ./storage:/var/www/html/storage
            - ./database/database.sqlite:/var/www/html/database/database.sqlite
            - ./.license:/var/www/html/.license
        ports:
            - ${APP_PORT}:8080
        environment:
            AUTORUN_ENABLED: true
            <<: *app-env
        depends_on:
            - redis
        restart: always

    ssr:
        build:
            context: .
            dockerfile: ./.docker/app.Dockerfile
            args:
                TOKEN: ${TOKEN}
        volumes:
            - ./storage:/var/www/html/storage
            - ./database/database.sqlite:/var/www/html/database/database.sqlite
            - ./.license:/var/www/html/.license
        command: [ 'php', '/var/www/html/artisan', 'inertia:start-ssr' ]
        stop_signal: SIGTERM # Set this for graceful shutdown if you're using fpm-apache or fpm-nginx
        environment:
            AUTORUN_ENABLED: true
            <<: *app-env
        depends_on:
            - app
            - redis
        restart: unless-stopped

    queue:
        build:
            context: .
            dockerfile: ./.docker/app.Dockerfile
            args:
                TOKEN: ${TOKEN}
        volumes:
            - ./storage:/var/www/html/storage
            - ./database/database.sqlite:/var/www/html/database/database.sqlite
            - ./.license:/var/www/html/.license
        command: [ 'php', '/var/www/html/artisan', 'queue:work', '--tries=3' ]
        stop_signal: SIGTERM # Set this for graceful shutdown if you're using fpm-apache or fpm-nginx
        environment:
            AUTORUN_ENABLED: true
            <<: *app-env
        healthcheck:
            # This is our native healthcheck script for the queue
            test: [ 'CMD', 'healthcheck-queue' ]
            start_period: 10s
        depends_on:
            - app
            - redis
        restart: unless-stopped

    scheduler:
        build:
            context: .
            dockerfile: ./.docker/app.Dockerfile
            args:
                TOKEN: ${TOKEN}
        volumes:
            - ./storage:/var/www/html/storage
            - ./database/database.sqlite:/var/www/html/database/database.sqlite
            - ./.license:/var/www/html/.license
        command: [ 'php', '/var/www/html/artisan', 'schedule:work' ]
        stop_signal: SIGTERM # Set this for graceful shutdown if you're using fpm-apache or fpm-nginx
        environment:
            AUTORUN_ENABLED: true
            <<: *app-env
        healthcheck:
            # This is our native healthcheck script for the scheduler
            test: [ 'CMD', 'healthcheck-schedule' ]
            start_period: 10s
        depends_on:
            - app
            - redis
        restart: unless-stopped

    horizon:
        build:
            context: .
            dockerfile: ./.docker/app.Dockerfile
            args:
                TOKEN: ${TOKEN}
        volumes:
            - ./storage:/var/www/html/storage
            - ./database/database.sqlite:/var/www/html/database/database.sqlite
            - ./.license:/var/www/html/.license
        command: [ 'php', '/var/www/html/artisan', 'horizon' ]
        stop_signal: SIGTERM # Set this for graceful shutdown if you're using fpm-apache or fpm-nginx
        environment:
            AUTORUN_ENABLED: true
            <<: *app-env
        healthcheck:
            # This is our native healthcheck script for Horizon
            test: [ 'CMD', 'healthcheck-horizon' ]
            start_period: 10s
        depends_on:
            - app
            - redis
        restart: unless-stopped

    redis:
        image: redis:6.2
        volumes:
            - redis_data:/data
        restart: unless-stopped

volumes:
    redis_data:


